<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Galin&#39;s Blog</title>
  
  <subtitle>有一说一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ga-lin.site/"/>
  <updated>2021-11-07T09:39:05.140Z</updated>
  <id>https://ga-lin.site/</id>
  
  <author>
    <name>Galin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>歌单</title>
    <link href="https://ga-lin.site/2021/11/07/%E6%AD%8C%E5%8D%95/"/>
    <id>https://ga-lin.site/2021/11/07/%E6%AD%8C%E5%8D%95/</id>
    <published>2021-11-07T03:38:56.000Z</published>
    <updated>2021-11-07T09:39:05.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-DQSddFRl" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>  <script>  var options = {"narrow":false,"autoplay":false,"showlrc":0,"listFolded":false,"mode":"order","mutex":true,"preload":"none","theme":"#e6d0b2","music":[{"title":"Cradle Waltz","author":"M2U","url":"/2021/11/07/歌单/Cradle%20Waltz.mp3","pic":"/2021/11/07/歌单/Cradle%20Waltz.jpg"},{"title":"Post-script","author":"The Hoshizora Project","url":"/2021/11/07/歌单/Post-script.mp3","pic":"/2021/11/07/歌单/Post-script.jpg"},{"title":"Yoake no uta","author":"M2U Vocal: Dazbee","url":"/2021/11/07/歌单/Yoake%20no%20uta.mp3","pic":"/2021/11/07/歌单/Yoake%20no%20uta.jpg"},{"title":"YUBIKIRI-GENMAN","author":"Mili","url":"/2021/11/07/歌单/YUBIKIRI-GENMAN.mp3","pic":"/2021/11/07/歌单/YUBIKIRI-GENMAN.jpg"},{"title":"DIARY","author":"Xiaoming","url":"/2021/11/07/歌单/DIARY.mp3","pic":"/2021/11/07/歌单/DIARY.jpg"}]};  options.element = document.getElementById("aplayer-DQSddFRl");  var ap = new APlayer(options);    window.aplayers || (window.aplayers = []);  window.aplayers.push(ap);  </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>BP-网络与反向传播算法</title>
    <link href="https://ga-lin.site/2020/04/07/BP-%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/"/>
    <id>https://ga-lin.site/2020/04/07/BP-%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/</id>
    <published>2020-04-07T06:53:43.000Z</published>
    <updated>2020-04-08T17:09:35.924Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>BP-网络可谓是机器学习领域的劝退哥，让人觉得难以亲近，其实理解之后会发现它和线性回归、逻辑回归一样，只是做了很简单的事情</p><p>那么，如何表示BP-网络才能让人更好地理解呢？</p><p>1）概念表示得是否易于理解，概念是给人看的，越容易理解越好<br><strong>2）必须解释正向和反向传播在干嘛？为什么要进行反向传播？</strong><br>3）应从最简单的神经网络开始，参数少，好记，不会眼花缭乱<br>4）公式、参数的表示和含义都要清楚，尤其是上标、下标</p><p>结合上面这几点，以解决二元分类问题为例，我们来看看BP-网络究竟做了什么</p><p><strong>假设样本只有一个特征，一个标签，用(x,y)来表示一个样本</strong></p><h2 id="神经元">神经元</h2><p>神经元由两个部分组成，一个是<strong>线性模型</strong>，另一个是<strong>激活函数</strong>，一般根据实际应用选择不同的激活函数</p><p><img src="/2020/04/07/BP-%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/%E7%A5%9E%E7%BB%8F%E5%85%83.png" alt="神经元"></p><p>这是一个最简单的神经元：<br>1）有一个输入<strong>x</strong>，表示样本的一个特征（通常还有一个偏置项，我们将其忽略，因为它不影响理解）<br>2）设<strong>z</strong>为线性模型的输出，<strong>θ</strong>为参数<br>3）以sigmoid函数作为激活函数可以得到神经元的输出<strong>h(z)</strong></p><p>没错，实际上一个神经元所做的事情和最简单的逻辑回归模型没有任何区别，但是当样本特征的数量逐渐增加时，在逻辑回归中我们常常采用将特征组合的方式构成一个多项式模型，而这将导致大量的参数需要处理，效率极低，这也是为何我们要使用神经网络的原因，就好比现在要用性能更好的多核处理器代替单核处理器了<a href="https://www.bilibili.com/video/BV164411S78V?p=43" target="_blank" rel="noopener">为什么要使用神经网络？</a></p><h2 id="神经网络">神经网络</h2><p>神经网络有三个层级，<strong>输入层</strong>、<strong>隐藏层</strong>和<strong>输出层</strong><br>1）输入层的神经元读入样本特征且不做任何处理，神经元的个数取决于样本特征的数目<br>2）输出层表示分类的结果，对于多元分类（类别≥3），神经元的个数取决于类别的数目<br>3）输入层和输出层有且只有一层，而隐藏层可以有多层，每一层对上一层传递来的数据进行处理；隐藏层＞1时，确保每个隐藏层的神经元个数相同；神经元的个数一般来说在不超过计算能力的情况下越多越好</p><p><img src="/2020/04/07/BP-%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-1.png" alt></p><p>这是一个三层的神经网络：<br>$$<br>θ^{(k)}_{ij}表示第k层第i个神经元映射到第k+1层第j个神经元的参数<br>$$</p><h2 id="正向和反向传播">正向和反向传播</h2><p>万事具备，那么，正向和反向传播究竟做了什么？</p><p>​<strong>如果要类比线性回归，那么正向传播就是在计算预测值ŷ，反向传播就是用预测值ŷ减去样本值y得到损失函数，再对损失函数求导得到梯度，使用梯度下降法更新参数</strong></p><p><img src="/2020/04/07/BP-%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-2.png" alt><br>$$<br>a^{(i)}_j表示第i层第j个神经元的输出<br>$$</p><p>$$<br>z^{(i)}_j表示第i层第j个神经元的输入<br>$$</p><h4 id="正向传播：">正向传播：</h4><p>第一层：<br>$$<br>a^{(1)} _1=z^{(1)} _1=x<br>$$</p><p>第二层：<br>$$<br>z^{(2)} _1=θ^{(1)} _{11}a^{(1)} _1=θ^{(1)} _{11}x<br>$$</p><p>$$<br>a^{(2)} _1=h(z^{(2)} _1)=\frac {1}{1+e ^{ -z^{(2)} _1} }<br>$$</p><p>$$<br>z^{(2)} _2=θ^{(1)} _{12}a^{(1)} _1=θ^{(1)} _{21}x<br>$$</p><p>$$<br>a^{(2)} _2=h(z^{(2)} _2)=\frac {1}{1+e ^{ -z^{(2)} _2} }<br>$$<br>第三层：<br>$$<br>z^{(3)} _1=θ^{(2)} _{11}a^{(2)} _1+θ^{(2)} _{21}a^{(2)} _2<br>$$</p><p>$$<br>a^{(3)} _1=h(z^{(3)} _1)=\frac {1}{1+e ^{ -z^{(3)} _1} }<br>$$</p><h4 id="反向传播：">反向传播：</h4><p><img src="/2020/04/07/BP-%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-3.png" alt><br>$$<br>δ^{(i)}_j表示第i层第j个神经元的误差<br>$$</p><p>由<a href="/2020/01/15/%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/" title="交叉熵损失函数">交叉熵损失函数</a>：<br>$$<br>L(a^{(3)} _1,y)=-[yloga^{(3)} _1+(1-y)log(1-a^{(3)} _1)]<br>$$</p><p>使用梯度下降法更新隐藏层与输出层间的参数，其中α为学习率<br>$$<br>θ^{(2)} _{11}=θ^{(2)} _{11}-α\frac {∂L(a^{(3)} _1,y)}{∂θ^{(2)} _{11}}<br>$$</p><p>$$<br>θ^{(2)} _{21}=θ^{(2)} _{21}-α\frac {∂L(a^{(3)} _1,y)}{∂θ^{(2)} _{21}}<br>$$</p><p>我们只详细讨论第一个参数，由<br>$$<br>L(a^{(3)} _1,y)=-[yloga^{(3)} _1+(1-y)log(1-a^{(3)} _1)]<br>$$</p><p>$$<br>a^{(3)} _1=h(z^{(3)} _1)=\frac {1}{1+e^ { -z^{(3)} _1} }<br>$$</p><p>$$<br>z^{(3)} _1=θ^{(2)} _{11}a^{(2)} _1+θ^{(2)} _{21}a^{(2)} _2<br>$$</p><p>根据链式求导法则，可得<br>$$<br>\frac {∂L(a^{(3)} _1,y)}{∂θ^{(2)} _{11}}=\frac {∂L(a^{(3)} _1,y)}{∂a^{(3)} _1} \frac {∂a^{(3)} _1}{∂z^{(3)} _1} \frac {∂z^{(3)} _1}{∂θ^{(2)} _{11}}<br>$$</p><p>$$<br>\frac {∂L(a^{(3)} _1,y)}{∂a^{(3)} _1}=-(\frac {y}{a^{(3)} _1}-\frac {1-y}{1-a^{(3)} _1})=-\frac {y(1-a^{(3)} _1)-(1-y)a^{(3)} _1}{a^{(3)} _1(1-a^{(3)} _1)}=\frac {a^{(3)} _1-y}{a^{(3)} _1(1-a^{(3)} _1)}<br>$$</p><p>$$<br>\frac {∂a^{(3)} _1}{∂z^{(3)} _1}=a^{(3)} _1(1-a^{(3)} _1)<br>$$</p><p>$$<br>\frac {∂z^{(3)} _1}{∂θ^{(2)} _{11}}=a^{(2)} _1<br>$$</p><p>故<br>$$<br>\frac {∂L(a^{(3)} _1,y)}{∂θ^{(2)} _{11}}=(a^{(3)} _1-y)a^{(2)} _1<br>$$</p><p>$$<br>θ^{(2)} _{11}=θ^{(2)} _{11}-α(a^{(3)} _1-y)a^{(2)} _1<br>$$</p><p>同理可得<br>$$<br>θ^{(2)} _{21}=θ^{(2)} _{21}-α(a^{(3)} _1-y)a^{(2)} _2<br>$$<br>接下来更新输入层与隐藏层间的参数<br>$$<br>θ^{(1)} _{11}=θ^{(1)} _{11}-α\frac {∂L(a^{(3)} _1,y)}{∂θ^{(1)} _{11}}<br>$$</p><p>$$<br>θ^{(1)} _{12}=θ^{(1)} _{12}-α\frac {∂L(a^{(3)} _1,y)}{∂θ^{(1)} _{12}}<br>$$</p><p>由<br>$$<br>z^{(3)} _1=θ^{(2)} _{11}a^{(2)} _1+θ^{(2)} _{21}a^{(2)} _2<br>$$</p><p>$$<br>a^{(2)} _1=h(z^{(2)} _1)=\frac {1}{1+e ^{ -z^{(2)} _1} }<br>$$</p><p>$$<br>z^{(2)} _1=θ^{(1)} _{11}a^{(1)} _1=θ^{(1)} _{11}x<br>$$</p><p>根据链式求导法则<br>$$<br>\frac {∂L(a^{(3)} _1,y)}{∂θ^{(1)} _{11}}=\frac {∂L(a^{(3)} _1,y)}{∂a^{(3)} _1} \frac {∂a^{(3)} _1}{∂z^{(3)} _1} \frac {∂z^{(3)} _1}{∂a^{(2)} _{1}} \frac {∂a^{(2)} _1}{∂z^{(2)} _1} \frac {∂z^{(2)} _1}{∂θ^{(1)} _{11}}<br>$$</p><p>$$<br>\frac {∂L(a^{(3)} _1,y)}{∂a^{(3)} _1}=\frac {a^{(3)} _1-y}{a^{(3)} _1(1-a^{(3)} _1)}<br>$$</p><p>$$<br>\frac {∂a^{(3)} _1}{∂z^{(3)} _1}=a^{(3)} _1(1-a^{(3)} _1)<br>$$</p><p>$$<br>\frac {∂z^{(3)} _1}{∂a^{(2)} _1}=θ^{(2)} _{11}<br>$$</p><p>$$<br>\frac {∂a^{(2)} _1}{∂z^{(2)} _1}=a^{(2)} _1(1-a^{(2)} _1)<br>$$</p><p>$$<br>\frac {∂z^{(2)} _1}{∂θ^{(1)} _{11}}=x<br>$$</p><p>可得<br>$$<br>\frac {∂L(a^{(3)} _1,y)}{∂θ^{(1)} _{11}}=(a^{(3)} _1-y)a^{(2)} _1(1-a^{(2)} _1)θ^{(2)} _{11}x<br>$$</p><p>$$<br>θ^{(1)} _{11}=θ^{(1)} _{11}-α(a^{(3)} _1-y)a^{(2)} _1(1-a^{(2)} _1)θ^{(2)} _{11}x<br>$$</p><p>同理<br>$$<br>\frac {∂L(a^{(3)} _1,y)}{∂θ^{(1)} _{12}}=(a^{(3)} _1-y)a^{(2)} _2(1-a^{(2)} _2)θ^{(2)} _{21}x<br>$$</p><p>$$<br>θ^{(1)} _{12}=θ^{(1)} _{12}-α(a^{(3)} _1-y)a^{(2)} _2(1-a^{(2)} _2)θ^{(2)} _{21}x<br>$$</p><p>结束了？这些式子看上去十分繁琐</p><p>没错，我们还有<strong>误差δ</strong>没有介绍</p><h2 id="误差δ">误差δ</h2><p><strong>为什么要放在最后来说？这是因为我们往往把损失函数和误差当成一回事，实则不然，误差是为了方便运算而人为定义的</strong></p><p><img src="/2020/04/07/BP-%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/BP-%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95%5C%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-3.png" alt><br>$$<br>δ^{(i)}_j表示第i层第j个神经元的误差<br>$$<br>在这个例子中：<br>$$<br>δ^{(3)} _1=a^{(3)} _1-y<br>$$</p><p>$$<br>δ^{(2)} _1=(a^{(3)} _1-y)a^{(2)} _1(1-a^{(2)} _1)θ^{(2)} _{11}=δ^{(3)} _1h’(z^{(2)} _1)θ^{(2)} _{11}<br>$$</p><p>$$<br>δ^{(2)} _2=(a^{(3)} _1-y)a^{(2)} _2(1-a^{(2)} _2)θ^{(2)} _{21}=δ^{(3)} _1h’(z^{(2)} _2)θ^{(2)} _{21}<br>$$</p><p><strong>事实上，不管神经网络有多少层，隐藏层每个神经元的误差都可以用下面这个公式计算：</strong><br>$$<br>δ^{(i)} _j=\sum _ {k=1}^m δ^{(i+1)} _k h’(z^{(i)} _j) θ^{(i)} _{jk}<br>$$<br>其中，m为下层神经元的个数</p><p><strong>而输出层的误差等于正向传播的输出值与真实值之差</strong></p><p>**很多人问这个公式是怎么来的，我想这可能是在使用更复杂的神经网络去推导时，在求梯度的过程中发现所有梯度都具有相同形式的项，于是将其提出来，经过证明后，定义为误差，**至少我是这么理解的</p><p>最后，回到我们的例子，我们所有更新参数的式子就变成了这样：<br>$$<br>θ^{(2)} _{11}=θ^{(2)} _{11}-αδ^{(3)} _1a^{(2)} _1<br>$$</p><p>$$<br>θ^{(2)} _{21}=θ^{(2)} _{21}-αδ^{(3)} _1a^{(2)} _2<br>$$</p><p>$$<br>θ^{(1)} _{11}=θ^{(1)} _{11}-αδ^{(2)} _1x<br>$$</p><p>$$<br>θ^{(1)} _{12}=θ^{(1)} _{12}-αδ^{(2)} _2x<br>$$</p><p>可以看到，在定义误差之后，<strong>所有更新参数的式子也具有了相同的形式：</strong><br>$$<br>θ^{(k)} _{ij}=θ^{(k)} _{ij}-αδ^{(k+1)} _ja^{k} _i<br>$$<br>在神经网络中，很多时候用<strong>权重w</strong>代替参数<strong>θ</strong>来表示</p><p>-end-</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="深度学习" scheme="https://ga-lin.site/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="https://ga-lin.site/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="BP-网络" scheme="https://ga-lin.site/tags/BP-%E7%BD%91%E7%BB%9C/"/>
    
      <category term="反向传播算法" scheme="https://ga-lin.site/tags/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归与梯度下降法</title>
    <link href="https://ga-lin.site/2020/01/30/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
    <id>https://ga-lin.site/2020/01/30/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/</id>
    <published>2020-01-30T15:49:08.000Z</published>
    <updated>2020-04-08T17:18:53.050Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在此之前，我们得先重温一下回归，很多时候我们只记得公式，知道逻辑回归是怎么一回事，却忘了回归是什么，怎么来的</p><p>我们都知道逻辑回归是分类，而不是回归，那么为何会有一个回归的名称呢，个人认为其原因主要是逻辑回归本质上还是在利用回归的思想：</p><p>​<strong>回归是一种归纳的思想，在深度学习领域，就是从样本的数据出发，确定某些变量之间的定量关系式；这个建立数学模型并估计未知参数的过程就叫做回归分析</strong></p><p>逻辑回归只不过是在输出上做处理，用以解决分类问题</p><p>好了，我们给出关系式：<br>$$<br>ŷ=σ(w^Tx+b)<br>$$</p><p>$$<br>σ(z)=\frac{1}{1+e^{-z}}<br>$$</p><p>这里我们设w和b均为一维</p><p>怎样估计w和b？我们总是希望预测值ŷ尽可能地拟合样本值y，损失函数描述了这种拟合关系，在逻辑回归中，使用<a href="/2020/01/15/%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/" title="交叉熵损失函数">交叉熵损失函数</a><br>$$<br>L(\hat y,y)=-[ylog\hat y+(1-y)log(1-\hat y)]<br>$$</p><p>我们可以将前面两个关系式代入，得到一个关于w和b的式子，而对于每一个样本都可以得到一个损失函数，设有m个样本，对这些损失函数求和得到一个成本函数：<br>$$<br>J(w,b)=\frac {1}{m} \sum _ {i=1}^m L(\hat y^{(i)}, y^{(i)})<br>$$</p><p>接下来问题变成了如何找到一组w和b，使得这个成本函数尽可能地小，可以形象地将其表示为一个“找碗底”的过程<br><img src="/2020/01/30/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95.png" alt="梯度下降法"><br>这就是梯度下降法所要做的，从初始点开始，每一次迭代都使用如下公式更新w和b，使得成本函数总是沿着最接近“碗底”的方向下降：<br>$$<br>w=w-α\frac {∂J(w,b)}{∂w}<br>$$</p><p>$$<br>b=b-α\frac {∂J(w,b)}{∂b}<br>$$</p><p>其中α为学习率，用以控制每一次梯度下降的步长</p><p>关于初始化w和b，几乎是任意的初始化方法都有效，因为成本函数是凸函数，无论在哪里初始化，使用梯度下降法都应该能达到”碗底“或其附近，这也是为什么选择交叉熵作为损失函数的原因，它总能得到或接近一个全局最优解</p><p>下面我们只关注w，忽略b，具体来看看梯度下降法为什么能够”找到碗底“<br><img src="/2020/01/30/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%AF%B4%E6%98%8E.png" alt="更好的说明"><br>由上图可以看到，无论怎样初始化w，梯度下降法总是使w朝着成本函数减少的方向移动的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="深度学习" scheme="https://ga-lin.site/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="https://ga-lin.site/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="梯度下降法" scheme="https://ga-lin.site/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>交叉熵损失函数</title>
    <link href="https://ga-lin.site/2020/01/15/%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    <id>https://ga-lin.site/2020/01/15/%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/</id>
    <published>2020-01-15T09:53:32.000Z</published>
    <updated>2020-02-10T02:23:19.066Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在理解交叉熵损失函数之前，有必要先来说一下信息熵这个概念</p><h2 id="信息熵">信息熵</h2><p>信息熵可以理解为信息杂乱程度的量化描述：信息越多，概率越均等则信息熵就越大；反之，信息越单一，概率越偏向其中某一个信息，那么熵值就越小</p><p>公式如下：</p><p>$$<br>H(X)=-\sum _ {i=1}^n P(x^{(i)}) logP(x^{(i)})<br>$$</p><p>其中，</p><p>$$<br>-logP(x^{(i)})<br>$$<br>表示一个信息的信息量，概率越小，信息量就越大，这很好理解，比如“太阳从西边出来了”，这几乎不可能发生，如果发生了，那对于我们来说其所含的信息量是巨大的</p><h2 id="交叉熵损失函数">交叉熵损失函数</h2><p>先给出公式：<br>$$<br>L(\hat y,y)=-[ylog\hat y+(1-y)log(1-\hat y)]<br>$$<br>其中ŷ为预测值</p><p>我们来解释一下这个公式为什么能起作用：</p><p>对于损失函数，我们希望它越小越好</p><p>当y=1时，L(ŷ,y)=-log ŷ，则ŷ应尽可能接近于1，才能让损失函数尽可能地小<br>当y=0时，L(ŷ,y)=-(1-y)log(1-ŷ)，则ŷ应尽可能接近于0，才能让损失函数尽可能地小</p><p>在逻辑回归中，预测值是一个概率，它表示与样本的拟合程度，而该公式既很好地表达了这种关系，也满足了损失函数的定义</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="深度学习" scheme="https://ga-lin.site/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="https://ga-lin.site/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="交叉熵" scheme="https://ga-lin.site/tags/%E4%BA%A4%E5%8F%89%E7%86%B5/"/>
    
  </entry>
  
  <entry>
    <title>最优性原理</title>
    <link href="https://ga-lin.site/2019/12/10/%E6%9C%80%E4%BC%98%E6%80%A7%E5%8E%9F%E7%90%86/"/>
    <id>https://ga-lin.site/2019/12/10/%E6%9C%80%E4%BC%98%E6%80%A7%E5%8E%9F%E7%90%86/</id>
    <published>2019-12-10T02:19:40.000Z</published>
    <updated>2021-11-07T04:49:04.436Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>看了很多有关最优性原理的解释，总是感觉不清晰、不透彻，以下是我个人的理解</p><p>我们先给出定义：</p><p><strong>最优性原理对于多阶段决策过程的最优决策序列具有如下性质：不论初始状态和初始决策如何，对于前面决策所造成的某一状态而言，其后各阶段的决策序列必须构成最优策略</strong></p><p>它看上去很讨厌，如同与你玩文字游戏，我们单看冒号前的文字，可知：<br>1）首先它指出，这是一个性质，是最优决策序列的性质<br>2）假设我们已知这个最优决策序列</p><p>好了我们就此打住，不继续往下解读了，我们来看一个直观的例子：<br><img src="/2019/12/10/%E6%9C%80%E4%BC%98%E6%80%A7%E5%8E%9F%E7%90%86/%E6%9C%80%E4%BC%98%E6%80%A7%E5%8E%9F%E7%90%86.png" alt="最优性原理"><br>假设有地点A、B、C、D、E，火车要从A开往E，求最短路线</p><p>这显然是一个多阶段决策问题，火车每到达一个地点，必须选择下一个开往的地点</p><p>假设我们已知这个问题的最优决策序列，显然它是A-&gt;B-&gt;C-&gt;E<br>请一定记住，我们接下来的讨论都是基于这个假设之上的</p><p>火车到达B后，从B开往E的最短路线是什么？</p><p>我们不知道，我们现在只知道：<br>1）从A开往E的最短路线A-&gt;B-&gt;C-&gt;E<br>2）B处有两个决策：开往C或开往D</p><p>此时，冒号之后的文字起了作用，在这个问题里，它表达为：从B开往E的最短路线必须在A-&gt;B-&gt;C-&gt;E上，即B-&gt;C-&gt;E，故火车在B处选择开往C</p><p>换一个角度理解，那么最优性原理想要表达的就是：<br><strong>对于多阶段决策问题，整个问题的最优决策序列，一定包含了它子问题的最优决策序列<br>不严谨地说就是，多阶段决策问题的整体最优解一定能使得局部最优</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="算法" scheme="https://ga-lin.site/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://ga-lin.site/categories/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="算法" scheme="https://ga-lin.site/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://ga-lin.site/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="最优性原理" scheme="https://ga-lin.site/tags/%E6%9C%80%E4%BC%98%E6%80%A7%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>斜投影——学习笔记</title>
    <link href="https://ga-lin.site/2019/11/20/%E6%96%9C%E6%8A%95%E5%BD%B1%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ga-lin.site/2019/11/20/%E6%96%9C%E6%8A%95%E5%BD%B1%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-20T00:20:07.000Z</published>
    <updated>2020-02-10T02:23:31.765Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当投射直线与投影面不垂直时，投影面得到的就是斜投影，下面我们用一个直观的例子来说明</p><h2 id="一个直观的例子："><strong>一个直观的例子：</strong></h2><p>假设：<br>1）投影平面为 z=0<br>2）直角坐标为(0，0，1)的点P通过斜投影得到点P’<br>3）L为P’到坐标原点的距离<br>4）α为OP’与x轴正向所形成的角<br>5）β为投射直线与投影平面所成的角<br><img src="/2019/11/20/%E6%96%9C%E6%8A%95%E5%BD%B1%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%96%9C%E6%8A%95%E5%BD%B1.png" alt="斜投影"></p><p>设三维空间中有直角坐标为(x，y，z)的任意一点Q’（如立方体的顶点），通过斜投影所得投影点的直角坐标为Q’（x’，y’，z’），显然 z’=0，则<br><img src="/2019/11/20/%E6%96%9C%E6%8A%95%E5%BD%B1%E2%80%94%E2%80%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B2%BFy%E8%BD%B4%E8%B4%9F%E6%96%B9%E5%90%91.png" alt="沿y轴负方向"><br>沿y轴负方向看去（如上图），可得：<br>$$<br>\frac{x’-x}{z}=\frac{Lcosα}{1}<br>$$</p><p>同理，沿x轴负方向看去可得：<br>$$<br>\frac{y’-y}{z}=\frac{Lsinα}{1}<br>$$</p><p>因此有斜投影变换公式：<br>$$<br>x’=x+z(Lcosα),y’=y+z(Lsinα)<br>$$<br>可将三维空间中任意一点斜投影至平面 z=0上</p><h2 id="如何得到斜二测投影？"><strong>如何得到斜二测投影？</strong></h2><p>实际上，观察图 1可知，投影平面上斜投影点的位置与角β有关，而角β受到点P位置和L大小的控制<br>我们可以调整点P位置和L大小，使得</p><p>当tanβ=2时，即可得到斜二测投影（斜二测投影使垂直于投影面的线段长度缩短为原来的一半）<br>当tanβ=1时，得到斜等测投影（斜等测投影使垂直于投影面的线段仍保持长度）</p><p>这时的α角还可以不同</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="计算机图形学" scheme="https://ga-lin.site/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
      <category term="计算机图形学" scheme="https://ga-lin.site/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="学习笔记" scheme="https://ga-lin.site/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Welcome!</title>
    <link href="https://ga-lin.site/2019/11/11/Welcome/"/>
    <id>https://ga-lin.site/2019/11/11/Welcome/</id>
    <published>2019-11-11T11:04:17.000Z</published>
    <updated>2020-01-15T09:51:25.205Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>非常高兴能够搭建自己的个人博客<br>​感谢 <a href="https://www.codesheep.cn/" target="_blank" rel="noopener">CodeSheep</a> 大大的视频 <a href="https://www.bilibili.com/video/av44544186" target="_blank" rel="noopener">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p><p>今后将在这里记录下自己的Coding旅程🙈</p><p>Welcome!<br><img src="/2019/11/11/Welcome/Welcome.png" alt="Welcome"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
